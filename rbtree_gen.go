// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package rbtree

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Tree) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields1zgensym_5a2f9927267bfa97_2 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields1zgensym_5a2f9927267bfa97_2 uint32
	totalEncodedFields1zgensym_5a2f9927267bfa97_2, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft1zgensym_5a2f9927267bfa97_2 := totalEncodedFields1zgensym_5a2f9927267bfa97_2
	missingFieldsLeft1zgensym_5a2f9927267bfa97_2 := maxFields1zgensym_5a2f9927267bfa97_2 - totalEncodedFields1zgensym_5a2f9927267bfa97_2

	var nextMiss1zgensym_5a2f9927267bfa97_2 int32 = -1
	var found1zgensym_5a2f9927267bfa97_2 [maxFields1zgensym_5a2f9927267bfa97_2]bool
	var curField1zgensym_5a2f9927267bfa97_2 string

doneWithStruct1zgensym_5a2f9927267bfa97_2:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft1zgensym_5a2f9927267bfa97_2 > 0 || missingFieldsLeft1zgensym_5a2f9927267bfa97_2 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft1zgensym_5a2f9927267bfa97_2, missingFieldsLeft1zgensym_5a2f9927267bfa97_2, msgp.ShowFound(found1zgensym_5a2f9927267bfa97_2[:]), decodeMsgFieldOrder1zgensym_5a2f9927267bfa97_2)
		if encodedFieldsLeft1zgensym_5a2f9927267bfa97_2 > 0 {
			encodedFieldsLeft1zgensym_5a2f9927267bfa97_2--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField1zgensym_5a2f9927267bfa97_2 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss1zgensym_5a2f9927267bfa97_2 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss1zgensym_5a2f9927267bfa97_2 = 0
			}
			for nextMiss1zgensym_5a2f9927267bfa97_2 < maxFields1zgensym_5a2f9927267bfa97_2 && (found1zgensym_5a2f9927267bfa97_2[nextMiss1zgensym_5a2f9927267bfa97_2] || decodeMsgFieldSkip1zgensym_5a2f9927267bfa97_2[nextMiss1zgensym_5a2f9927267bfa97_2]) {
				nextMiss1zgensym_5a2f9927267bfa97_2++
			}
			if nextMiss1zgensym_5a2f9927267bfa97_2 == maxFields1zgensym_5a2f9927267bfa97_2 {
				// filled all the empty fields!
				break doneWithStruct1zgensym_5a2f9927267bfa97_2
			}
			missingFieldsLeft1zgensym_5a2f9927267bfa97_2--
			curField1zgensym_5a2f9927267bfa97_2 = decodeMsgFieldOrder1zgensym_5a2f9927267bfa97_2[nextMiss1zgensym_5a2f9927267bfa97_2]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField1zgensym_5a2f9927267bfa97_2)
		switch curField1zgensym_5a2f9927267bfa97_2 {
		// -- templateDecodeMsg ends here --

		case "Serz__ptr":
			found1zgensym_5a2f9927267bfa97_2[0] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				z.Serz = nil
			} else if kptr, dup := dc.DedupReadIsDup("z.Serz", "*TreeSerz"); dup {
				z.Serz = kptr.(*TreeSerz)
			} else {
				if z.Serz == nil {
					z.Serz = new(TreeSerz)
				}
				dc.DedupIndexEachPtr(z.Serz)

				const maxFields3zgensym_5a2f9927267bfa97_4 = 1

				// -- templateDecodeMsg starts here--
				var totalEncodedFields3zgensym_5a2f9927267bfa97_4 uint32
				totalEncodedFields3zgensym_5a2f9927267bfa97_4, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				encodedFieldsLeft3zgensym_5a2f9927267bfa97_4 := totalEncodedFields3zgensym_5a2f9927267bfa97_4
				missingFieldsLeft3zgensym_5a2f9927267bfa97_4 := maxFields3zgensym_5a2f9927267bfa97_4 - totalEncodedFields3zgensym_5a2f9927267bfa97_4

				var nextMiss3zgensym_5a2f9927267bfa97_4 int32 = -1
				var found3zgensym_5a2f9927267bfa97_4 [maxFields3zgensym_5a2f9927267bfa97_4]bool
				var curField3zgensym_5a2f9927267bfa97_4 string

			doneWithStruct3zgensym_5a2f9927267bfa97_4:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft3zgensym_5a2f9927267bfa97_4 > 0 || missingFieldsLeft3zgensym_5a2f9927267bfa97_4 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft3zgensym_5a2f9927267bfa97_4, missingFieldsLeft3zgensym_5a2f9927267bfa97_4, msgp.ShowFound(found3zgensym_5a2f9927267bfa97_4[:]), decodeMsgFieldOrder3zgensym_5a2f9927267bfa97_4)
					if encodedFieldsLeft3zgensym_5a2f9927267bfa97_4 > 0 {
						encodedFieldsLeft3zgensym_5a2f9927267bfa97_4--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						curField3zgensym_5a2f9927267bfa97_4 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss3zgensym_5a2f9927267bfa97_4 < 0 {
							// tell the reader to only give us Nils
							// until further notice.
							dc.PushAlwaysNil()
							nextMiss3zgensym_5a2f9927267bfa97_4 = 0
						}
						for nextMiss3zgensym_5a2f9927267bfa97_4 < maxFields3zgensym_5a2f9927267bfa97_4 && (found3zgensym_5a2f9927267bfa97_4[nextMiss3zgensym_5a2f9927267bfa97_4] || decodeMsgFieldSkip3zgensym_5a2f9927267bfa97_4[nextMiss3zgensym_5a2f9927267bfa97_4]) {
							nextMiss3zgensym_5a2f9927267bfa97_4++
						}
						if nextMiss3zgensym_5a2f9927267bfa97_4 == maxFields3zgensym_5a2f9927267bfa97_4 {
							// filled all the empty fields!
							break doneWithStruct3zgensym_5a2f9927267bfa97_4
						}
						missingFieldsLeft3zgensym_5a2f9927267bfa97_4--
						curField3zgensym_5a2f9927267bfa97_4 = decodeMsgFieldOrder3zgensym_5a2f9927267bfa97_4[nextMiss3zgensym_5a2f9927267bfa97_4]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField3zgensym_5a2f9927267bfa97_4)
					switch curField3zgensym_5a2f9927267bfa97_4 {
					// -- templateDecodeMsg ends here --

					case "Elslice_zid00_slc":
						found3zgensym_5a2f9927267bfa97_4[0] = true
						var zgensym_5a2f9927267bfa97_5 uint32
						zgensym_5a2f9927267bfa97_5, err = dc.ReadArrayHeader()
						if err != nil {
							return
						}
						if cap(z.Serz.Elslice) >= int(zgensym_5a2f9927267bfa97_5) {
							z.Serz.Elslice = (z.Serz.Elslice)[:zgensym_5a2f9927267bfa97_5]
						} else {
							z.Serz.Elslice = make([]Item, zgensym_5a2f9927267bfa97_5)
						}
						// NB: we have a slice of interfaces, so we need to
						//  fill target with the concrete implementation
						for zgensym_5a2f9927267bfa97_0 := range z.Serz.Elslice {
							if kptr, dup := dc.DedupReadIsDup("z.Serz.Elslice[zgensym_5a2f9927267bfa97_0]", "Item"); dup {
								z.Serz.Elslice[zgensym_5a2f9927267bfa97_0] = kptr.(Item)
								continue
							}
							concreteName_zgensym_5a2f9927267bfa97_7 := dc.NextStructName()
							target_zgensym_5a2f9927267bfa97_6 := z.Serz.Elslice[zgensym_5a2f9927267bfa97_0]
							if concreteName_zgensym_5a2f9927267bfa97_7 != "" {
								if cfac_zgensym_5a2f9927267bfa97_8, cfac_zgensym_5a2f9927267bfa97_8_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_5a2f9927267bfa97_8_OK {
									target_zgensym_5a2f9927267bfa97_6 = cfac_zgensym_5a2f9927267bfa97_8.NewValueAsInterface(0, concreteName_zgensym_5a2f9927267bfa97_7).(Item)
								}
								dc.DedupIndexEachPtr(target_zgensym_5a2f9927267bfa97_6)
								err = target_zgensym_5a2f9927267bfa97_6.DecodeMsg(dc)
								if err != nil {
									return
								}

								z.Serz.Elslice[zgensym_5a2f9927267bfa97_0] = target_zgensym_5a2f9927267bfa97_6
								continue
							}

							dc.DedupIndexEachPtr(z.Serz.Elslice[zgensym_5a2f9927267bfa97_0])

							err = z.Serz.Elslice[zgensym_5a2f9927267bfa97_0].DecodeMsg(dc) // from decodeRangeBlock in spec.go:511. IsInInterfaceSlice: true
							if err != nil {
								return
							}
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
				if nextMiss3zgensym_5a2f9927267bfa97_4 != -1 {
					dc.PopAlwaysNil()
				}

			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss1zgensym_5a2f9927267bfa97_2 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Tree
var decodeMsgFieldOrder1zgensym_5a2f9927267bfa97_2 = []string{"Serz__ptr"}

var decodeMsgFieldSkip1zgensym_5a2f9927267bfa97_2 = []bool{false}

// fields of TreeSerz
var decodeMsgFieldOrder3zgensym_5a2f9927267bfa97_4 = []string{"Elslice_zid00_slc"}

var decodeMsgFieldSkip3zgensym_5a2f9927267bfa97_4 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *Tree) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.Serz == nil) // pointer, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Tree) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_5a2f9927267bfa97_9 [1]bool
	fieldsInUse_zgensym_5a2f9927267bfa97_10 := z.fieldsNotEmpty(empty_zgensym_5a2f9927267bfa97_9[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_5a2f9927267bfa97_10 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Tree'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x72, 0x65, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_5a2f9927267bfa97_9[0] {
		// write "Serz__ptr"
		err = en.Append(0xa9, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Serz == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// record the pointer for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Serz)
			if err != nil {
				return
			}
			if !dup {

				// honor the omitempty tags
				var empty_zgensym_5a2f9927267bfa97_11 [1]bool
				fieldsInUse_zgensym_5a2f9927267bfa97_12 := z.Serz.fieldsNotEmpty(empty_zgensym_5a2f9927267bfa97_11[:])

				// map header
				err = en.WriteMapHeader(fieldsInUse_zgensym_5a2f9927267bfa97_12 + 1)
				if err != nil {
					return err
				}

				// runtime struct type identification for 'TreeSerz'
				err = en.Append(0xa1, 0x40)
				if err != nil {
					return err
				}
				err = en.WriteStringFromBytes([]byte{0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72, 0x7a})
				if err != nil {
					return err
				}

				if !empty_zgensym_5a2f9927267bfa97_11[0] {
					// write "Elslice_zid00_slc"
					err = en.Append(0xb1, 0x45, 0x6c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
					if err != nil {
						return err
					}
					err = en.WriteArrayHeader(uint32(len(z.Serz.Elslice)))
					if err != nil {
						return
					}
					for zgensym_5a2f9927267bfa97_0 := range z.Serz.Elslice {
						// encodeGen.gBase IDENT

						// record the interface for deduplication
						var dup bool
						dup, err = en.DedupWriteIsDup(z.Serz.Elslice[zgensym_5a2f9927267bfa97_0])
						if err != nil {
							return
						}
						if !dup {
							err = z.Serz.Elslice[zgensym_5a2f9927267bfa97_0].EncodeMsg(en)
							if err != nil {
								return
							}
						}
					}
				}

			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Tree) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Serz__ptr"
		o = append(o, 0xa9, 0x53, 0x65, 0x72, 0x7a, 0x5f, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Serz == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			// honor the omitempty tags
			var empty [1]bool
			fieldsInUse := z.Serz.fieldsNotEmpty(empty[:])
			o = msgp.AppendMapHeader(o, fieldsInUse)

			if !empty[0] {
				// string "Elslice_zid00_slc"
				o = append(o, 0xb1, 0x45, 0x6c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
				o = msgp.AppendArrayHeader(o, uint32(len(z.Serz.Elslice)))
				for zgensym_5a2f9927267bfa97_0 := range z.Serz.Elslice {
					o, err = msgp.AppendIntf(o, z.Serz.Elslice[zgensym_5a2f9927267bfa97_0]) // is.iface, gen/marshal.go:237, b='&gen.BaseElem{Common:gen.Common{vname:"z.Serz.Elslice[zgensym_5a2f9927267bfa97_0]", alias:"Item", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:true, isInIfaceSlice:true}'
					if err != nil {
						return
					}
				}
			}

		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Tree) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Tree) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields13zgensym_5a2f9927267bfa97_14 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields13zgensym_5a2f9927267bfa97_14 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields13zgensym_5a2f9927267bfa97_14, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft13zgensym_5a2f9927267bfa97_14 := totalEncodedFields13zgensym_5a2f9927267bfa97_14
	missingFieldsLeft13zgensym_5a2f9927267bfa97_14 := maxFields13zgensym_5a2f9927267bfa97_14 - totalEncodedFields13zgensym_5a2f9927267bfa97_14

	var nextMiss13zgensym_5a2f9927267bfa97_14 int32 = -1
	var found13zgensym_5a2f9927267bfa97_14 [maxFields13zgensym_5a2f9927267bfa97_14]bool
	var curField13zgensym_5a2f9927267bfa97_14 string

doneWithStruct13zgensym_5a2f9927267bfa97_14:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft13zgensym_5a2f9927267bfa97_14 > 0 || missingFieldsLeft13zgensym_5a2f9927267bfa97_14 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft13zgensym_5a2f9927267bfa97_14, missingFieldsLeft13zgensym_5a2f9927267bfa97_14, msgp.ShowFound(found13zgensym_5a2f9927267bfa97_14[:]), unmarshalMsgFieldOrder13zgensym_5a2f9927267bfa97_14)
		if encodedFieldsLeft13zgensym_5a2f9927267bfa97_14 > 0 {
			encodedFieldsLeft13zgensym_5a2f9927267bfa97_14--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField13zgensym_5a2f9927267bfa97_14 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss13zgensym_5a2f9927267bfa97_14 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss13zgensym_5a2f9927267bfa97_14 = 0
			}
			for nextMiss13zgensym_5a2f9927267bfa97_14 < maxFields13zgensym_5a2f9927267bfa97_14 && (found13zgensym_5a2f9927267bfa97_14[nextMiss13zgensym_5a2f9927267bfa97_14] || unmarshalMsgFieldSkip13zgensym_5a2f9927267bfa97_14[nextMiss13zgensym_5a2f9927267bfa97_14]) {
				nextMiss13zgensym_5a2f9927267bfa97_14++
			}
			if nextMiss13zgensym_5a2f9927267bfa97_14 == maxFields13zgensym_5a2f9927267bfa97_14 {
				// filled all the empty fields!
				break doneWithStruct13zgensym_5a2f9927267bfa97_14
			}
			missingFieldsLeft13zgensym_5a2f9927267bfa97_14--
			curField13zgensym_5a2f9927267bfa97_14 = unmarshalMsgFieldOrder13zgensym_5a2f9927267bfa97_14[nextMiss13zgensym_5a2f9927267bfa97_14]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField13zgensym_5a2f9927267bfa97_14)
		switch curField13zgensym_5a2f9927267bfa97_14 {
		// -- templateUnmarshalMsg ends here --

		case "Serz__ptr":
			found13zgensym_5a2f9927267bfa97_14[0] = true
			// default gPtr logic.
			if nbs.PeekNil(bts) && z.Serz == nil {
				// consume the nil
				bts, err = nbs.ReadNilBytes(bts)
				if err != nil {
					return
				}
			} else {
				// read as-if the wire has bytes, letting nbs take care of nils.

				if z.Serz == nil {
					z.Serz = new(TreeSerz)
				}

				const maxFields15zgensym_5a2f9927267bfa97_16 = 1

				// -- templateUnmarshalMsg starts here--
				var totalEncodedFields15zgensym_5a2f9927267bfa97_16 uint32
				if !nbs.AlwaysNil {
					totalEncodedFields15zgensym_5a2f9927267bfa97_16, bts, err = nbs.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
				}
				encodedFieldsLeft15zgensym_5a2f9927267bfa97_16 := totalEncodedFields15zgensym_5a2f9927267bfa97_16
				missingFieldsLeft15zgensym_5a2f9927267bfa97_16 := maxFields15zgensym_5a2f9927267bfa97_16 - totalEncodedFields15zgensym_5a2f9927267bfa97_16

				var nextMiss15zgensym_5a2f9927267bfa97_16 int32 = -1
				var found15zgensym_5a2f9927267bfa97_16 [maxFields15zgensym_5a2f9927267bfa97_16]bool
				var curField15zgensym_5a2f9927267bfa97_16 string

			doneWithStruct15zgensym_5a2f9927267bfa97_16:
				// First fill all the encoded fields, then
				// treat the remaining, missing fields, as Nil.
				for encodedFieldsLeft15zgensym_5a2f9927267bfa97_16 > 0 || missingFieldsLeft15zgensym_5a2f9927267bfa97_16 > 0 {
					//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft15zgensym_5a2f9927267bfa97_16, missingFieldsLeft15zgensym_5a2f9927267bfa97_16, msgp.ShowFound(found15zgensym_5a2f9927267bfa97_16[:]), unmarshalMsgFieldOrder15zgensym_5a2f9927267bfa97_16)
					if encodedFieldsLeft15zgensym_5a2f9927267bfa97_16 > 0 {
						encodedFieldsLeft15zgensym_5a2f9927267bfa97_16--
						field, bts, err = nbs.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						curField15zgensym_5a2f9927267bfa97_16 = msgp.UnsafeString(field)
					} else {
						//missing fields need handling
						if nextMiss15zgensym_5a2f9927267bfa97_16 < 0 {
							// set bts to contain just mnil (0xc0)
							bts = nbs.PushAlwaysNil(bts)
							nextMiss15zgensym_5a2f9927267bfa97_16 = 0
						}
						for nextMiss15zgensym_5a2f9927267bfa97_16 < maxFields15zgensym_5a2f9927267bfa97_16 && (found15zgensym_5a2f9927267bfa97_16[nextMiss15zgensym_5a2f9927267bfa97_16] || unmarshalMsgFieldSkip15zgensym_5a2f9927267bfa97_16[nextMiss15zgensym_5a2f9927267bfa97_16]) {
							nextMiss15zgensym_5a2f9927267bfa97_16++
						}
						if nextMiss15zgensym_5a2f9927267bfa97_16 == maxFields15zgensym_5a2f9927267bfa97_16 {
							// filled all the empty fields!
							break doneWithStruct15zgensym_5a2f9927267bfa97_16
						}
						missingFieldsLeft15zgensym_5a2f9927267bfa97_16--
						curField15zgensym_5a2f9927267bfa97_16 = unmarshalMsgFieldOrder15zgensym_5a2f9927267bfa97_16[nextMiss15zgensym_5a2f9927267bfa97_16]
					}
					//fmt.Printf("switching on curField: '%v'\n", curField15zgensym_5a2f9927267bfa97_16)
					switch curField15zgensym_5a2f9927267bfa97_16 {
					// -- templateUnmarshalMsg ends here --

					case "Elslice_zid00_slc":
						found15zgensym_5a2f9927267bfa97_16[0] = true
						if nbs.AlwaysNil {
							(z.Serz.Elslice) = (z.Serz.Elslice)[:0]
						} else {

							var zgensym_5a2f9927267bfa97_17 uint32
							zgensym_5a2f9927267bfa97_17, bts, err = nbs.ReadArrayHeaderBytes(bts)
							if err != nil {
								return
							}
							if cap(z.Serz.Elslice) >= int(zgensym_5a2f9927267bfa97_17) {
								z.Serz.Elslice = (z.Serz.Elslice)[:zgensym_5a2f9927267bfa97_17]
							} else {
								z.Serz.Elslice = make([]Item, zgensym_5a2f9927267bfa97_17)
							}
							// NB: we have a slice of interfaces, so we need to
							//  fill target with the concrete implementation
							for zgensym_5a2f9927267bfa97_0 := range z.Serz.Elslice {

								var concreteName_zgensym_5a2f9927267bfa97_19 string
								concreteName_zgensym_5a2f9927267bfa97_19, bts = nbs.NextStructName(bts)
								target_zgensym_5a2f9927267bfa97_18 := z.Serz.Elslice[zgensym_5a2f9927267bfa97_0]
								if concreteName_zgensym_5a2f9927267bfa97_19 != "" {
									if cfac_zgensym_5a2f9927267bfa97_20, cfac_zgensym_5a2f9927267bfa97_20_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_5a2f9927267bfa97_20_OK {
										target_zgensym_5a2f9927267bfa97_18 = cfac_zgensym_5a2f9927267bfa97_20.NewValueAsInterface(0, concreteName_zgensym_5a2f9927267bfa97_19).(Item)
									}
									bts, err = target_zgensym_5a2f9927267bfa97_18.UnmarshalMsg(bts)
									if err != nil {
										return
									}

									z.Serz.Elslice[zgensym_5a2f9927267bfa97_0] = target_zgensym_5a2f9927267bfa97_18
									continue
								}

								bts, err = z.Serz.Elslice[zgensym_5a2f9927267bfa97_0].UnmarshalMsg(bts) // from unmarshalRangeBlock in spec.go:486. IsInInterfaceSlice: true
								if err != nil {
									return
								}
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
				if nextMiss15zgensym_5a2f9927267bfa97_16 != -1 {
					bts = nbs.PopAlwaysNil()
				}

			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss13zgensym_5a2f9927267bfa97_14 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Tree
var unmarshalMsgFieldOrder13zgensym_5a2f9927267bfa97_14 = []string{"Serz__ptr"}

var unmarshalMsgFieldSkip13zgensym_5a2f9927267bfa97_14 = []bool{false}

// fields of TreeSerz
var unmarshalMsgFieldOrder15zgensym_5a2f9927267bfa97_16 = []string{"Elslice_zid00_slc"}

var unmarshalMsgFieldSkip15zgensym_5a2f9927267bfa97_16 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Tree) Msgsize() (s int) {
	s = 1 + 10
	if z.Serz == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 18 + msgp.ArrayHeaderSize
		for zgensym_5a2f9927267bfa97_0 := range z.Serz.Elslice {
			s += msgp.GuessSize(z.Serz.Elslice[zgensym_5a2f9927267bfa97_0])
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TreeSerz) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields22zgensym_5a2f9927267bfa97_23 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields22zgensym_5a2f9927267bfa97_23 uint32
	totalEncodedFields22zgensym_5a2f9927267bfa97_23, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft22zgensym_5a2f9927267bfa97_23 := totalEncodedFields22zgensym_5a2f9927267bfa97_23
	missingFieldsLeft22zgensym_5a2f9927267bfa97_23 := maxFields22zgensym_5a2f9927267bfa97_23 - totalEncodedFields22zgensym_5a2f9927267bfa97_23

	var nextMiss22zgensym_5a2f9927267bfa97_23 int32 = -1
	var found22zgensym_5a2f9927267bfa97_23 [maxFields22zgensym_5a2f9927267bfa97_23]bool
	var curField22zgensym_5a2f9927267bfa97_23 string

doneWithStruct22zgensym_5a2f9927267bfa97_23:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft22zgensym_5a2f9927267bfa97_23 > 0 || missingFieldsLeft22zgensym_5a2f9927267bfa97_23 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft22zgensym_5a2f9927267bfa97_23, missingFieldsLeft22zgensym_5a2f9927267bfa97_23, msgp.ShowFound(found22zgensym_5a2f9927267bfa97_23[:]), decodeMsgFieldOrder22zgensym_5a2f9927267bfa97_23)
		if encodedFieldsLeft22zgensym_5a2f9927267bfa97_23 > 0 {
			encodedFieldsLeft22zgensym_5a2f9927267bfa97_23--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField22zgensym_5a2f9927267bfa97_23 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss22zgensym_5a2f9927267bfa97_23 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss22zgensym_5a2f9927267bfa97_23 = 0
			}
			for nextMiss22zgensym_5a2f9927267bfa97_23 < maxFields22zgensym_5a2f9927267bfa97_23 && (found22zgensym_5a2f9927267bfa97_23[nextMiss22zgensym_5a2f9927267bfa97_23] || decodeMsgFieldSkip22zgensym_5a2f9927267bfa97_23[nextMiss22zgensym_5a2f9927267bfa97_23]) {
				nextMiss22zgensym_5a2f9927267bfa97_23++
			}
			if nextMiss22zgensym_5a2f9927267bfa97_23 == maxFields22zgensym_5a2f9927267bfa97_23 {
				// filled all the empty fields!
				break doneWithStruct22zgensym_5a2f9927267bfa97_23
			}
			missingFieldsLeft22zgensym_5a2f9927267bfa97_23--
			curField22zgensym_5a2f9927267bfa97_23 = decodeMsgFieldOrder22zgensym_5a2f9927267bfa97_23[nextMiss22zgensym_5a2f9927267bfa97_23]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField22zgensym_5a2f9927267bfa97_23)
		switch curField22zgensym_5a2f9927267bfa97_23 {
		// -- templateDecodeMsg ends here --

		case "Elslice_zid00_slc":
			found22zgensym_5a2f9927267bfa97_23[0] = true
			var zgensym_5a2f9927267bfa97_24 uint32
			zgensym_5a2f9927267bfa97_24, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Elslice) >= int(zgensym_5a2f9927267bfa97_24) {
				z.Elslice = (z.Elslice)[:zgensym_5a2f9927267bfa97_24]
			} else {
				z.Elslice = make([]Item, zgensym_5a2f9927267bfa97_24)
			}
			// NB: we have a slice of interfaces, so we need to
			//  fill target with the concrete implementation
			for zgensym_5a2f9927267bfa97_21 := range z.Elslice {
				if kptr, dup := dc.DedupReadIsDup("z.Elslice[zgensym_5a2f9927267bfa97_21]", "Item"); dup {
					z.Elslice[zgensym_5a2f9927267bfa97_21] = kptr.(Item)
					continue
				}
				concreteName_zgensym_5a2f9927267bfa97_26 := dc.NextStructName()
				target_zgensym_5a2f9927267bfa97_25 := z.Elslice[zgensym_5a2f9927267bfa97_21]
				if concreteName_zgensym_5a2f9927267bfa97_26 != "" {
					if cfac_zgensym_5a2f9927267bfa97_27, cfac_zgensym_5a2f9927267bfa97_27_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_5a2f9927267bfa97_27_OK {
						target_zgensym_5a2f9927267bfa97_25 = cfac_zgensym_5a2f9927267bfa97_27.NewValueAsInterface(0, concreteName_zgensym_5a2f9927267bfa97_26).(Item)
					}
					dc.DedupIndexEachPtr(target_zgensym_5a2f9927267bfa97_25)
					err = target_zgensym_5a2f9927267bfa97_25.DecodeMsg(dc)
					if err != nil {
						return
					}

					z.Elslice[zgensym_5a2f9927267bfa97_21] = target_zgensym_5a2f9927267bfa97_25
					continue
				}

				dc.DedupIndexEachPtr(z.Elslice[zgensym_5a2f9927267bfa97_21])

				err = z.Elslice[zgensym_5a2f9927267bfa97_21].DecodeMsg(dc) // from decodeRangeBlock in spec.go:511. IsInInterfaceSlice: true
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss22zgensym_5a2f9927267bfa97_23 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TreeSerz
var decodeMsgFieldOrder22zgensym_5a2f9927267bfa97_23 = []string{"Elslice_zid00_slc"}

var decodeMsgFieldSkip22zgensym_5a2f9927267bfa97_23 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *TreeSerz) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Elslice) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *TreeSerz) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_5a2f9927267bfa97_28 [1]bool
	fieldsInUse_zgensym_5a2f9927267bfa97_29 := z.fieldsNotEmpty(empty_zgensym_5a2f9927267bfa97_28[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_5a2f9927267bfa97_29 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TreeSerz'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72, 0x7a})
	if err != nil {
		return err
	}

	if !empty_zgensym_5a2f9927267bfa97_28[0] {
		// write "Elslice_zid00_slc"
		err = en.Append(0xb1, 0x45, 0x6c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Elslice)))
		if err != nil {
			return
		}
		for zgensym_5a2f9927267bfa97_21 := range z.Elslice {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Elslice[zgensym_5a2f9927267bfa97_21])
			if err != nil {
				return
			}
			if !dup {
				err = z.Elslice[zgensym_5a2f9927267bfa97_21].EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TreeSerz) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Elslice_zid00_slc"
		o = append(o, 0xb1, 0x45, 0x6c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Elslice)))
		for zgensym_5a2f9927267bfa97_21 := range z.Elslice {
			o, err = msgp.AppendIntf(o, z.Elslice[zgensym_5a2f9927267bfa97_21]) // is.iface, gen/marshal.go:237, b='&gen.BaseElem{Common:gen.Common{vname:"z.Elslice[zgensym_5a2f9927267bfa97_21]", alias:"Item", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:true, isInIfaceSlice:true}'
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TreeSerz) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TreeSerz) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields30zgensym_5a2f9927267bfa97_31 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields30zgensym_5a2f9927267bfa97_31 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields30zgensym_5a2f9927267bfa97_31, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft30zgensym_5a2f9927267bfa97_31 := totalEncodedFields30zgensym_5a2f9927267bfa97_31
	missingFieldsLeft30zgensym_5a2f9927267bfa97_31 := maxFields30zgensym_5a2f9927267bfa97_31 - totalEncodedFields30zgensym_5a2f9927267bfa97_31

	var nextMiss30zgensym_5a2f9927267bfa97_31 int32 = -1
	var found30zgensym_5a2f9927267bfa97_31 [maxFields30zgensym_5a2f9927267bfa97_31]bool
	var curField30zgensym_5a2f9927267bfa97_31 string

doneWithStruct30zgensym_5a2f9927267bfa97_31:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft30zgensym_5a2f9927267bfa97_31 > 0 || missingFieldsLeft30zgensym_5a2f9927267bfa97_31 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft30zgensym_5a2f9927267bfa97_31, missingFieldsLeft30zgensym_5a2f9927267bfa97_31, msgp.ShowFound(found30zgensym_5a2f9927267bfa97_31[:]), unmarshalMsgFieldOrder30zgensym_5a2f9927267bfa97_31)
		if encodedFieldsLeft30zgensym_5a2f9927267bfa97_31 > 0 {
			encodedFieldsLeft30zgensym_5a2f9927267bfa97_31--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField30zgensym_5a2f9927267bfa97_31 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss30zgensym_5a2f9927267bfa97_31 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss30zgensym_5a2f9927267bfa97_31 = 0
			}
			for nextMiss30zgensym_5a2f9927267bfa97_31 < maxFields30zgensym_5a2f9927267bfa97_31 && (found30zgensym_5a2f9927267bfa97_31[nextMiss30zgensym_5a2f9927267bfa97_31] || unmarshalMsgFieldSkip30zgensym_5a2f9927267bfa97_31[nextMiss30zgensym_5a2f9927267bfa97_31]) {
				nextMiss30zgensym_5a2f9927267bfa97_31++
			}
			if nextMiss30zgensym_5a2f9927267bfa97_31 == maxFields30zgensym_5a2f9927267bfa97_31 {
				// filled all the empty fields!
				break doneWithStruct30zgensym_5a2f9927267bfa97_31
			}
			missingFieldsLeft30zgensym_5a2f9927267bfa97_31--
			curField30zgensym_5a2f9927267bfa97_31 = unmarshalMsgFieldOrder30zgensym_5a2f9927267bfa97_31[nextMiss30zgensym_5a2f9927267bfa97_31]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField30zgensym_5a2f9927267bfa97_31)
		switch curField30zgensym_5a2f9927267bfa97_31 {
		// -- templateUnmarshalMsg ends here --

		case "Elslice_zid00_slc":
			found30zgensym_5a2f9927267bfa97_31[0] = true
			if nbs.AlwaysNil {
				(z.Elslice) = (z.Elslice)[:0]
			} else {

				var zgensym_5a2f9927267bfa97_32 uint32
				zgensym_5a2f9927267bfa97_32, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Elslice) >= int(zgensym_5a2f9927267bfa97_32) {
					z.Elslice = (z.Elslice)[:zgensym_5a2f9927267bfa97_32]
				} else {
					z.Elslice = make([]Item, zgensym_5a2f9927267bfa97_32)
				}
				// NB: we have a slice of interfaces, so we need to
				//  fill target with the concrete implementation
				for zgensym_5a2f9927267bfa97_21 := range z.Elslice {

					var concreteName_zgensym_5a2f9927267bfa97_34 string
					concreteName_zgensym_5a2f9927267bfa97_34, bts = nbs.NextStructName(bts)
					target_zgensym_5a2f9927267bfa97_33 := z.Elslice[zgensym_5a2f9927267bfa97_21]
					if concreteName_zgensym_5a2f9927267bfa97_34 != "" {
						if cfac_zgensym_5a2f9927267bfa97_35, cfac_zgensym_5a2f9927267bfa97_35_OK := interface{}(z).(msgp.ConcreteFactory); cfac_zgensym_5a2f9927267bfa97_35_OK {
							target_zgensym_5a2f9927267bfa97_33 = cfac_zgensym_5a2f9927267bfa97_35.NewValueAsInterface(0, concreteName_zgensym_5a2f9927267bfa97_34).(Item)
						}
						bts, err = target_zgensym_5a2f9927267bfa97_33.UnmarshalMsg(bts)
						if err != nil {
							return
						}

						z.Elslice[zgensym_5a2f9927267bfa97_21] = target_zgensym_5a2f9927267bfa97_33
						continue
					}

					bts, err = z.Elslice[zgensym_5a2f9927267bfa97_21].UnmarshalMsg(bts) // from unmarshalRangeBlock in spec.go:486. IsInInterfaceSlice: true
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss30zgensym_5a2f9927267bfa97_31 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TreeSerz
var unmarshalMsgFieldOrder30zgensym_5a2f9927267bfa97_31 = []string{"Elslice_zid00_slc"}

var unmarshalMsgFieldSkip30zgensym_5a2f9927267bfa97_31 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TreeSerz) Msgsize() (s int) {
	s = 1 + 18 + msgp.ArrayHeaderSize
	for zgensym_5a2f9927267bfa97_21 := range z.Elslice {
		s += msgp.GuessSize(z.Elslice[zgensym_5a2f9927267bfa97_21])
	}
	return
}
